Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"


property    bool    face_player$    = true                  doc = "Face player when starting to talk";
property    bool    face_back$      = false                 doc = "Face back when talk is finished";


float actor_X$;
float actor_Y$;
float actor_Z$;
float actor_W$;


bool give_object$( goid target$, string templateName$ )
{
    if( !target$.IsValid() )
    {
        return false;
    }

    SiegePos SpawnPos$;
    GoCloneReq cloneReq$ = MakeGoCloneReq( templateName$ );
    
    SpawnPos$ = target$.go.placement.position;
    cloneReq$.StartingPos	= SpawnPos$;
    
    if( target$.Go.Hasmind )
    {
        if( AIQuery.FindSpotRelativeToSource( target$.Go, .25, .5, 2.0, target$.Go.Mind.TempPos1 ) )
        {
            cloneReq$.StartingPos = target$.Go.Mind.TempPos1;
        }
    }	
    cloneReq$.SnapToTerrain = true;
    GoDb.SCloneGo( cloneReq$ );
    
    return true;
}

bool give_gold$( goid target$, int amount$ )
{
    if( !target$.IsValid() )
    {
        return false;
    }

    SiegePos SpawnPos$;
    GoCloneReq cloneReq$ = MakeGoCloneReq( "gold" );

    SpawnPos$ = m_Target$.go.placement.position;
    cloneReq$.StartingPos	= SpawnPos$;

    if( m_Target$.Go.Hasmind )
    {
        if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
        {
            cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
        }
    }	
    cloneReq$.SnapToTerrain = true;
    Goid gold$ = GoDb.SCloneGo( cloneReq$ );
    gold$.Go.Aspect.SetGoldValue(200);

    return true;
}

startup state STARTUP$
{
}

event OnJobInit$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Target$	= job$.GoalObject;

    if ( face_player$ )
    {
        actor_X$ = m_go$.Placement.Orientation.x;
		actor_Y$ = m_go$.Placement.Orientation.y;
		actor_Z$ = m_go$.Placement.Orientation.z;
		actor_W$ = m_go$.Placement.Orientation.w;

		SetState Face$;
    }
    else
    {
        SetState Talk$;
    }
}

state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}

state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( !GameAuditor.GetDb.GetBool( "ardun_gave_book" ) )
			{
                GameAuditor.GetDb.SetBool( "ardun_gave_book", true );
                give_object$( m_Target$, "book_glb_lore_altair_3" );
			}
		}
	}

	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		#only( game )
		[[
			int books$ = 0;
			if ( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "book_glb_lore_altair_1", m_Target$ ) )
			{
				books$ += 1;
			}
			if ( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "book_glb_lore_altair_2", m_Target$ ) )
			{
				books$ += 1;
			}
			if ( Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "book_glb_lore_altair_3", m_Target$ ) )
			{
				books$ += 1;
			}

			if( books$ == 2 ) {
				m_Go$.GetConversation.RSSelectConversation( "conversation_apprentice_one_book" );
			}
			else if( books$ == 3 )
			{
				// delete books here.

				goid temp_book$ = UIPartyManager.DoesActivePartyHaveTemplate( "book_glb_lore_altair_1", m_Target$ );
				temp_book$.Go.Parent.Mind.SDoJob( MakeJobReq( JAT_DROP, JQ_ACTION, QP_FRONT, AO_REFLEX, temp_book$ ) );
				PostWorldMessage( WE_REQ_DELETE, temp_book$, temp_book$, .1 );

				temp_book$ = UIPartyManager.DoesActivePartyHaveTemplate( "book_glb_lore_altair_2", m_Target$ );
				temp_book$.Go.Parent.Mind.SDoJob( MakeJobReq( JAT_DROP, JQ_ACTION, QP_FRONT, AO_REFLEX, temp_book$ ) );
				PostWorldMessage( WE_REQ_DELETE, temp_book$, temp_book$, .1 );

				temp_book$ = UIPartyManager.DoesActivePartyHaveTemplate( "book_glb_lore_altair_3", m_Target$ );
				temp_book$.Go.Parent.Mind.SDoJob( MakeJobReq( JAT_DROP, JQ_ACTION, QP_FRONT, AO_REFLEX, temp_book$ ) );
				PostWorldMessage( WE_REQ_DELETE, temp_book$, temp_book$, .1 );

				// reward the player

                give_gold$( m_Target$, 200 );

				m_Go$.GetConversation.RSSelectConversation( "conversation_apprentice_two_books" );
			}
			else if ( Victory.IsQuestCompleted( "altair_apprentice_books" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_apprentice_complete" );
			}
			else
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_apprentice" );
			}
		]]

		m_Go$.GetConversation.RSActivateDialogue();

        TryAnim$('talk');
	}
}

state Exiting$
{
	event OnEnterState$
	{
        if ( face_player$ )
        {
            MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

            if ( face_back$ )
            {
                m_go$.Placement.SSetOrientation( MakeQuat( actor_X$, actor_Y$, actor_Z$, actor_W$));
            }
        }

		m_Job$.MarkForDeletion();
	}
}
