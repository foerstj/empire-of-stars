Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"


property    string  namespace$  = "companion"   doc = "Namespace for conversations and flags";
property    string  oid$                        doc = "Object ID, lower-case hex, no leading zeroes, e.g. 0x17001af";
property    bool    face_player$    = true                  doc = "Face player when starting to talk";
property    bool    face_back$      = false                 doc = "Face back when talk is finished";


float actor_X$;
float actor_Y$;
float actor_Z$;
float actor_W$;


startup state STARTUP$
{
}

event OnJobInit$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Target$	= job$.GoalObject;

    if ( face_player$ )
    {
        actor_X$ = m_go$.Placement.Orientation.x;
		actor_Y$ = m_go$.Placement.Orientation.y;
		actor_Z$ = m_go$.Placement.Orientation.z;
		actor_W$ = m_go$.Placement.Orientation.w;

		SetState Face$;
    }
    else
    {
        SetState Talk$;
    }
}

state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}

state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
        if ( ! Victory.IsQuestCompleted( "aldebaran_overseer" ) )
        {
            m_Go$.GetConversation.RSSelectConversation( "hire_talk2overseer" );
        }
        else
        {
            m_Go$.GetConversation.RSSelectConversation( MakeStringF( "hire_%s_join", namespace$ ) );
        }

		if ( GameAuditor.GetDb.GetBool( MakeStringF( "party_accept_%s", oid$ ) ) )
		{
			GameAuditor.GetDb.SetBool(  MakeStringF( "party_accept_%s", oid$ ), false );
			m_Go$.GetConversation.RSSelectConversation( "hire_accept_have_money" );
		}
		else if ( GameAuditor.GetDb.GetBool( MakeStringF( "%s_accept_no_money", namespace$ ) ) )
		{
			GameAuditor.GetDb.SetBool( MakeStringF( "%s_accept_no_money", namespace$ ), false );
			m_Go$.GetConversation.RSSelectConversation( "hire_accept_no_money" );
		}
		else if ( GameAuditor.GetDb.GetBool( MakeStringF( "party_decline_%s", oid$ ) ) )
		{
			GameAuditor.GetDb.SetBool( MakeStringF( "party_decline_%s", oid$ ), false );
			m_Go$.GetConversation.RSSelectConversation( "hire_reject" );
		}
		else if ( GameAuditor.GetDb.GetBool( MakeStringF( "party_disband_%s", oid$ ) ) )
		{
			GameAuditor.GetDb.SetBool( MakeStringF( "party_disband_%s", oid$ ), false );
			m_Go$.GetConversation.RSSelectConversation( "hire_disband" );
			GameAuditor.GetDb.SetBool( MakeStringF( "party_disbanded_%s", oid$ ), true );
		}
		else if ( GameAuditor.GetDb.GetBool( MakeStringF( "party_disbanded_%s", oid$ ) ) )
		{
			m_Go$.GetConversation.RSSelectConversation( MakeStringF( "hire_%s_join", namespace$ ) );
		}

		m_Go$.GetConversation.RSActivateDialogue();

        TryAnim$('talk');
	}
}

state Exiting$
{
	event OnEnterState$
	{
        if ( face_player$ )
        {
            MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

            if ( face_back$ )
            {
                m_go$.Placement.SSetOrientation( MakeQuat( actor_X$, actor_Y$, actor_Z$, actor_W$));
            }
        }

		m_Job$.MarkForDeletion();
	}
}
