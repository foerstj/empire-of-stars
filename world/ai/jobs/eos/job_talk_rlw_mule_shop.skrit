Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"


property    string  namespace$  = "mule_merchant"   doc = "Namespace for conversations and flags";


startup state STARTUP$
{
}

event OnJobInit$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Target$	= job$.GoalObject;

	SetState Face$;
}

state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}

state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		TryAnim$('talk');
	}

	event OnEnterState$
	{
		if ( !Victory.IsQuestCompleted( "rigel_wet_1_townsafety" , m_Target$) )
		{
			m_Go$.GetConversation.RSSelectConversation( namespace$ + "_during_townsafety" );
		}		
		else
        {
            int numMules$ = m_Go$.GetStore().GetNumHires();
			if ( numMules$ == 0 )
			{
				m_Go$.GetConversation.RSSelectConversation( namespace$ + "_no_packmules" );
			}
            else
            {
                m_Go$.GetConversation.RSSelectConversation( namespace$ + "_has_packmules" );
            }
        }

		m_Go$.GetConversation.RSActivateDialogue();

        TryAnim$('talk');
	}
}

state Exiting$
{
	event OnEnterState$
	{
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

		m_Job$.MarkForDeletion();
	}
}

